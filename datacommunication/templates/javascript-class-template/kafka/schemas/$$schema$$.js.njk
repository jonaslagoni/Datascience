{%- macro constructor(schema) %}

    /**
    * 
    {%- for propertyName, property in schema.properties() %}
    * @param { {{property.type()}} } {{propertyName}} 
    {%- endfor %}
    */
    constructor(
        {{schema.properties() | schemaConstructor}}
    ){ 
    {%- for propertyName, property in schema.properties() %}
        this.{{propertyName}}={{propertyName}};
    {%- endfor %}
    }
{% endmacro %}

{%- macro initGetSet(propertyName) %}
    this.{{propertyName}} = {{propertyName}};
{% endmacro %}

{%- for propertyName, property in schema.properties() %}
{%- if property.enum() | length %}
const {{propertyName}}Enum = Object.freeze({
	{%- set enumCounter = 0 %}
	{%- for enum in property.enum() %}
		{%- if enumCounter == property.enum().length %}
			"{{enum}}": "{{enum}}"
		{%- else %}
			"{{enum}}": "{{enum}}",
		{%- endif %}
		{%- set enumCounter = enumCounter + 1 %}
	{%- endfor %}
    })
exports.{{propertyName}}Enum = {{propertyName}}Enum;
{%- endif %}
{%- endfor %}
exports = class {{schema.uid() | upperFirst}} {
    constructor();
    
    {%- if schema.properties() | length %}
    {{constructor(schema)}}
    {%- else %}
    /**
    * 
    * @param { {{schema.items().uid() | upperFirst}}[] } {{schema.items().uid()}} 
    */
    constructor({{schema.items().uid()}}){ 
        this.{{schema.items().uid()}} = {{schema.items().uid()}}
    }
    {%- endif %}

    
    /**
    * Copy a js object into this.
    * @param {*} jsonObject the js object 
    */
    copyInto(jsonObject){
        {%- if schema.properties() | length %}
        {%- for propertyName, property in schema.properties() %}
        {%- if property.required() %}
        this.{{ propertyName }}=jsonObject.{{ propertyName }};
        {%- else %}
        if(jsonObject.{{ propertyName }}){
            this.{{ propertyName }}=jsonObject.{{ propertyName }};
        }
        {%- endif %}
        {%- endfor %}
        {%- else %}
        this.{{ schema.items().uid() }}=jsonObject.{{ schema.items().uid() }};
        {%- endif %}
    }
}
