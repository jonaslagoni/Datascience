
package dk.sdu.datascience.kafka;

import dk.sdu.datascience.kafka.structure.messages.*;
import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.serialization.LongSerializer;
import org.apache.kafka.common.serialization.StringSerializer;
import java.util.Properties;
import com.google.gson.Gson;
import java.util.Collections;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import java.time.Duration;
import java.util.Iterator;
public class KafkaClient{
{%- for channelName, channel in asyncapi.channels() %}
	{%- if channel.hasPublish() %}
    /**
     * {{channel.description()}}
     * @param {{channel.publish().message().name()}} to send as payload
     */
	public static void produce{{channelName | camelCase}}({{channel.publish().message().name() | upperFirst}} {{channel.publish().message().name()}}) {
		final Producer<Long, String> producer = ProducerCreator.createProducer();
        // Create a Logger 
        Logger logger = Logger.getLogger("produce{{channelName | camelCase}}"); 
		long time = System.currentTimeMillis();
		Gson gson = new Gson();
		String payload = gson.toJson({{channel.publish().message().name()}});
        logger.log(Level.INFO, "Sending record with values: {0}", payload);
		try {
			final ProducerRecord<Long, String> record =
					new ProducerRecord<>("{{channelName | camelCase}}",
								payload);

			RecordMetadata metadata = producer.send(record).get();

			long elapsedTime = System.currentTimeMillis() - time;
            logger.log(Level.INFO, "Sent record with value: {0}, with elapsed time: {1}", new Object[] { record.value() , elapsedTime });
		} catch (ExecutionException ex) {
            logger.log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            logger.log(Level.SEVERE, null, ex);
        }  finally {
			producer.flush();
			producer.close();
		}
	}
	{%- elif  channel.hasSubscribe() %}
	public interface {{channelName | camelCase}}Callback { 
		// this can be any type of method 
		void messageConsumed({{channel.subscribe().message().name() | upperFirst}} payload); 
	} 

    /**
    * {{channel.description()}}
    * @param callback which should be called when data is consumed
    */
    public static void consumer{{channel.subscribe().message().name() | upperFirst}}({{channelName | camelCase}}Callback callback) {
        Thread thread = new Thread(() -> {
            Logger logger = Logger.getLogger("consumer{{channel.subscribe().message().name() | upperFirst}} | Thread"); 
            logger.log(Level.INFO, "Start consuming on subject");
            Consumer<Long, String> consumer = ConsumerCreator.createConsumer();
            consumer.subscribe(Collections.singletonList("energidataCo2Emission"));
            while(true){
                logger.log(Level.INFO, "Consuming data");
                consumer{{channel.subscribe().message().name() | upperFirst}}(consumer, callback);
                logger.log(Level.INFO, "Consumed data, waiting 5 sec to continue.");
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e) {}
            }
        });
        thread.start();
    }

    private static void consumer{{channel.subscribe().message().name() | upperFirst}}(Consumer<Long, String> consumer,{{channelName | camelCase}}Callback callback) {
        Logger logger = Logger.getLogger("consumer{{channel.subscribe().message().name() | upperFirst}}"); 
        ConsumerRecords<Long, String> consumerRecords = consumer.poll(Duration.ofMillis(1000));
        // 1000 is the time in milliseconds consumer will wait if no record is found at broker.
        if (consumerRecords.count() == 0) {
            logger.log(Level.FINE, "No records found");
            return;
        }
        Gson gson = new Gson();
        //print each record.
        Iterator<ConsumerRecord<Long, String>> iterator = consumerRecords.iterator();
        while (iterator.hasNext()) {
            ConsumerRecord consumerRecord = iterator.next();
            logger.log(Level.INFO, "Record consumed, with key: {0}, value: {1}, partition: {2}, offset: {3}", new Object[] { consumerRecord.key(), consumerRecord.value(), consumerRecord.partition(), consumerRecord.offset()});
            {{channel.subscribe().message().name() | upperFirst}} data = gson.fromJson("" + consumerRecord.value(), {{channel.subscribe().message().name() | upperFirst}}.class);
            callback.messageConsumed(data);
        }
        // commits the offset of record to broker.
        logger.log(Level.FINE, "Comitting offset");
        consumer.commitAsync();
    }
	{%- endif %}
{%- endfor %}
}


